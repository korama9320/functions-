
// a function that looks through an array of objects (first argument) and returns an array of all objects that have matching name and value pairs (second argument).


function whatIsInAName(collection, source) {
  const arr = [];
  
for(let i=0;i<collection.length;i++){
if((Object.values(source).every(element => Object.values(collection[i]).includes(element)))
&&(Object.keys(source).every(element => Object.keys(collection[i]).includes(element)))){arr.push(collection[i])}
}
  return arr;
}







//Translate the provided string to Pig Latin. Input strings are guaranteed to be English words in all lowercase.

function translatePigLatin(str) {
  let reg =/^[aioueAIOUE]/
  if(reg.test(str)){return str.concat("way")}{let a= str.split(/(?=[aeuio])/);
  a.push(a[0]);
  a.shift();
 let b=a.join('').concat("ay");
  return b
  }
  ;
}
//Perform a search and replace on the sentence using the arguments provided and return the new sentence.Preserve the case of the first character in the original word when you are replacing it.
function myReplace(str, before, after) {
  if(/^[A-Z]/.test(before)){after=after.charAt(0).toUpperCase()+ after.slice(1)}else{after=after.charAt(0).toLowerCase()+ after.slice(1)};
    
  return str.replace(before,after);

}






//Pairs of DNA strands consist of protein base pairs. 
//Base pairs are represented by the characters AT and CG, which form building blocks of the DNA double helix.
function pairElement(str) {
  let a =str.split("")
  let arr=[];
  for(let i=0;i<a.length;i++){
    if(a[i]==="C"){arr.push(["C","G"])}else if(a[i]==="G"){arr.push(["G","C"])}else if(a[i]==="A"){arr.push(["A","T"])}else if(a[i]==="T"){arr.push(["T","A"])}

  }
  console.log(arr)
  return arr;
}





//Find the missing letter in the passed letter range and return it.
//If all letters are present in the range, return undefined.


function fearNotLetter(str) {
  for(let i=0;i<str.length;i++){
    //console.log(String.fromCharCode(97))

    if(str.charCodeAt(i)!==str.charCodeAt(0)+i){return String.fromCharCode(str.charCodeAt(0)+i)}
  }
  return undefined;
};
  
  
  
  
//  Write a function that takes two or more arrays and returns a new array of unique values in the order of the original provided arrays.

function uniteUnique(...arr) {
  let todim =[...arr];
  let conc=[];
 let arrr=[];
 for(let i=0;i<todim.length;i++){
   conc=conc.concat(todim[i]);
 }
 for(let i=0;i<conc.length;i++){
   if(arrr.indexOf(conc[i])==-1){arrr.push(conc[i])}
 }

  return arrr;
};






//Sum All Odd Fibonacci Numbers

function sumFibs(num) {
let arr=[1,1];
  let a=0;
  for(let i=0;arr[i]<num;i++){
    let b=arr[i]+arr[i-1];
   if(b<=num) {arr.push(b)} 
  }
  for(let i=0;i<arr.length;i++){if(arr[i]%2!==0){a+=arr[i]}}
  console.log(arr,a)
  return a;
}


//sum all prime


function sumPrimes(num) {
  let a=0;
for(let i=2;i<=num;i++){
  
const isPrime = num => {
    for(let i = 2, s = Math.sqrt(num); i <= s; i++)
        if(num % i === 0) return false; 
    return num > 1;
}

if(isPrime(i)){a+=i}

  } return a;}


